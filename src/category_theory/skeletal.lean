-- /-
-- Copyright (c) 2020 Bhavik Mehta. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Bhavik Mehta
-- -/
-- import category_theory.isomorphism_classes

-- /-!
-- # Skeleton of a category

-- Defines skeletal categories as categories in which any two isomorphic objects are equal.
-- -/

-- universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

-- namespace category_theory

-- open category

-- variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C]
-- variables (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]
-- variables (E : Type u‚ÇÉ) [category.{v‚ÇÉ} E]

-- /-- A category is skeletal if isomorphic objects are equal. -/
-- def skeletal : Prop := ‚àÄ (X Y : C), is_isomorphic X Y ‚Üí X = Y

-- variable (C)

-- /--
-- `is_skeleton_of C D F` says that `F : D ‚•§ C` exhibits `D` as a skeletal full subcategory of `C`,
-- in particular `F` is a (strong) equivalence and `D` is skeletal.
-- -/
-- structure is_skeleton_of (F : D ‚•§ C) :=
-- (skel : skeletal D)
-- (eqv : is_equivalence F)

-- local attribute [instance] is_isomorphic_setoid

-- def sparse_skeleton := quotient (is_isomorphic_setoid C)


-- namespace sparse_skeleton

-- instance preorder : preorder (sparse_skeleton C) :=
-- { le :=
--   begin
--     refine quotient.lift‚ÇÇ (Œª X Y, nonempty (X ‚ü∂ Y)) _,
--     rintros _ _ _ _ ‚ü®i‚ÇÅ‚ü© ‚ü®i‚ÇÇ‚ü©,
--     apply propext ‚ü®_, _‚ü©,
--     { rintro ‚ü®f‚ü©,
--       refine ‚ü®i‚ÇÅ.inv ‚â´ f ‚â´ i‚ÇÇ.hom‚ü© },
--     { rintro ‚ü®g‚ü©,
--       refine ‚ü®i‚ÇÅ.hom ‚â´ g ‚â´ i‚ÇÇ.inv‚ü© },
--   end,
--   le_refl :=
--   begin
--     refine quotient.ind (Œª a, _),
--     exact ‚ü®ùüô _‚ü©,
--   end,
--   le_trans :=
--   begin
--     intros _ _ _,
--     apply quotient.induction_on‚ÇÉ a b c,
--     rintros _ _ _ ‚ü®f‚ü© ‚ü®g‚ü©,
--     refine ‚ü®f ‚â´ g‚ü©,
--   end }

-- instance sparse {X Y : sparse_skeleton C} : subsingleton (X ‚ü∂ Y) :=
-- ‚ü®by { rintros ‚ü®‚ü®f‚ÇÅ‚ü©‚ü© ‚ü®‚ü®f‚ÇÇ‚ü©‚ü©, refl }‚ü©

-- instance subsingleton_iso {X Y : sparse_skeleton C} : subsingleton (X ‚âÖ Y) :=
-- ‚ü®by { intros i‚ÇÅ i‚ÇÇ, ext1, apply subsingleton.elim }‚ü©

-- variables {C} {D}

-- @[simps]
-- def map (F : C ‚•§ D) : sparse_skeleton C ‚•§ sparse_skeleton D :=
-- { obj := quotient.lift (quotient.mk ‚àò F.obj) $
--     Œª _ _ k, nonempty.elim k (quotient.sound ‚àò nonempty.intro ‚àò F.map_iso),
--   map := Œª X Y, quotient.rec_on_subsingleton‚ÇÇ X Y $
--            Œª x y k, hom_of_le (nonempty.elim (le_of_hom k) (Œª t, nonempty.intro (F.map t))) }

-- def map_comp (F : C ‚•§ D) (G : D ‚•§ E) : map (F ‚ãô G) ‚âÖ map F ‚ãô map G :=
-- nat_iso.of_components (Œª X, quotient.rec_on_subsingleton X (Œª x, iso.refl _)) (by tidy)

-- def map_id : map (ùü≠ C) ‚âÖ ùü≠ _ :=
-- nat_iso.of_components (Œª X, quotient.rec_on_subsingleton X (Œª x, iso.refl _)) (by tidy)

-- def map_func {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (k : F‚ÇÅ ‚ü∂ F‚ÇÇ) : map F‚ÇÅ ‚ü∂ map F‚ÇÇ :=
-- { app := Œª X, quotient.rec_on_subsingleton X (Œª x, ‚ü®‚ü®‚ü®k.app x‚ü©‚ü©‚ü©) }

-- def map_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (h : F‚ÇÅ ‚âÖ F‚ÇÇ) : map F‚ÇÅ ‚âÖ map F‚ÇÇ :=
-- { hom := map_func h.hom, inv := map_func h.inv }

-- variables [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)]

-- def functor.eq_of_iso {F‚ÇÅ F‚ÇÇ : D ‚•§ C} (hC : skeletal C) (hF : F‚ÇÅ ‚âÖ F‚ÇÇ) : F‚ÇÅ = F‚ÇÇ :=
-- functor.ext (Œª X, hC _ _ ‚ü®hF.app X‚ü©) (Œª _ _ _, subsingleton.elim _ _)

-- lemma functor_skeletal (hC : skeletal C) : skeletal (D ‚•§ C) :=
-- Œª F‚ÇÅ F‚ÇÇ h, h.elim (functor.eq_of_iso hC)

-- lemma functor_sparse (F‚ÇÅ F‚ÇÇ : D ‚•§ C) : subsingleton (F‚ÇÅ ‚ü∂ F‚ÇÇ) :=
-- ‚ü®Œª Œ± Œ≤, nat_trans.ext Œ± Œ≤ (funext (Œª _, subsingleton.elim _ _))‚ü©

-- def iso_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âÖ Y :=
-- { hom := f, inv := g }

-- lemma equiv_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âà Y :=
-- ‚ü®iso_of_both_ways f g‚ü©

-- instance : partial_order (sparse_skeleton C) :=
-- { le_antisymm :=
--   begin
--     refine quotient.ind‚ÇÇ _,
--     rintros _ _ ‚ü®f‚ü© ‚ü®g‚ü©,
--     apply quotient.sound,
--     apply equiv_of_both_ways f g,
--   end,
--   ..category_theory.sparse_skeleton.preorder C }

-- lemma skeletal : skeletal (sparse_skeleton C) :=
-- begin
--   intros X Y,
--   apply quotient.induction_on‚ÇÇ X Y,
--   rintros _ _ ‚ü®‚ü®‚ü®‚ü®f‚ü©‚ü©‚ü©, ‚ü®‚ü®‚ü®g‚ü©‚ü©‚ü©, _, _‚ü©,
--   apply quotient.sound,
--   apply equiv_of_both_ways f g,
-- end


-- end sparse_skeleton

-- def to_sparse_skeleton : C ‚•§ sparse_skeleton C :=
-- { obj := quotient.mk,
--   map := Œª X Y f, ‚ü®‚ü®‚ü®f‚ü©‚ü©‚ü© }

-- end category_theory
